{
	"extensions": [ "ml", "mli" ],
	"increase_indent_pattern": "^((?!\\/\\/).)*(\\{[^}\"'`]*|\\([^)\"'`]*|\\[[^\\]\"'`]*)$",
	"decrease_indent_pattern": "^((?!.*?\\/\\*).*\\*\\/)?\\s*[\\)\\}\\]].*$",
	"indent_next_line_pattern": "^\\s*\\w+\\s*\\(.*\\)\\s*(\\/\\/.*|\\/\\*.*\\*\\/\\s*)?$",
	"formatter_command": "ocamlformat -",
	"brackets": [
		{ "open": "\"", "close": "\"" },
		{ "open": "'", "close": "'" },
		{ "open": "(", "close": ")" },
		{ "open": "[", "close": "]" },
		{ "open": "[|", "close": "|]" },
		{ "open": "{", "close": "}" }
	],
	"highlighters": [
		{
			"name": "multiline_comment",
			"default_face": "comment",
			"patterns": [
				{
					"type": "pop",
					"face": "comment",
					"pattern": "\\*\\)"
				}
			]
		},
		{
			"name": "string",
			"default_face": "string",
			"patterns": [
				{
					"face": "constant",
					"pattern": "\\\\."
				},
				{
					"face": "constant",
					"pattern": "\\%[^\"']"
				},
				{
					"type": "pop",
					"face": "string",
					"pattern": "\""
				}
			]
		},
		{
			"name": "char",
			"default_face": "string",
			"patterns": [
				{
					"face": "constant",
					"pattern": "\\\\."
				},
				{
					"face": "constant",
					"pattern": "\\%[^\"']"
				},
				{
					"type": "pop",
					"face": "string",
					"pattern": "'"
				}
			]
		},
		{
			"name": "root",
			"default_face": "default",
			"patterns": [
				{
					"type": "push",
					"face": "comment",
					"pattern": "\\(\\*",
					"sub_highlighter": "multiline_comment"
				},
				{
					"type": "push",
					"face": "string",
					"pattern": "\"",
					"sub_highlighter": "string"
				},
				{
					"type": "push",
					"face": "string",
					"pattern": "'",
					"sub_highlighter": "char"
				},
				{
					"face": "keyword",
					"pattern": "\\b(and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|virtual|when|while|with)\\b(?!')"
				},
				{
					"face": "type",
					"pattern": "\\b(unit|bool|int|int32|int64|nativeint|float|char|bytes|string)\\b"
				},
				{ "face": "constant", "pattern": "\\b(true|false|\\(\\))\\b" },
				{ "face": "constant", "pattern": "\\b(-?[\\d_]+)(?!\\.)\\b" },
				{ "face": "constant", "pattern": "\\b(0x[a-fA-F\\d_]+)(?!\\.)\\b" },
				{ "face": "constant", "pattern": "\\b(0o[0-7_]+)(?!\\.)\\b" },
				{ "face": "constant", "pattern": "\\b(0b[01_]+)(?!\\.)\\b" },
				{ "face": "constant", "pattern": "(-?\\b[\\d_]+(?:\\.[\\d_]+)?(?:[eE][+-]?[\\d_]+)?)(?!\\.)\\b" },
				{ "face": "constant", "pattern": "(-?\\b0x[a-fA-F\\d_]+(?:\\.[a-fA-F\\d_]+)?[pP]?(?:[+-]?[\\d_]+)?)(?!\\.)\\b" },
				{
					"face": "operator",
					"pattern": "([\\.\\&\\*\\+\\-\\/\\%\\!\\=\\?\\~\\^\\|])"
				},
				{
					"face": "punctuation",
					"pattern": "([\\(\\)\\[\\]\\{\\}])"
				}
			]
		}
	]
}
